{
    // Editor
    "editor.fontSize": 13,
    "editor.fontFamily": "Menlo, Monaco, 'Courier New', monospace",
    "editor.minimap.enabled": false,
    "editor.folding": false,
    "editor.tabSize": 2,
    "editor.insertSpaces": true,
    "editor.renderControlCharacters": true,
    "editor.renderWhitespace": "trailing",
    "editor.lineNumbers": "off",
    "editor.wordWrap": "off",
    "editor.glyphMargin": false,
    "editor.snippetSuggestions": "none",
    "editor.accessibilitySupport": "off",
    "editor.guides.indentation": false,
    "editor.bracketPairColorization.enabled": false,

    // Workbench
    "workbench.colorTheme": "GitHub Dark Default",
    "workbench.preferredLightColorTheme": "GitHub Light Default",
    "workbench.preferredDarkColorTheme": "GitHub Dark Default",
    "workbench.editor.enablePreview": false,       // If you're going to open it, open it properly!
    "workbench.editor.showTabs": false,            // Down with tabs!
    "workbench.editor.limit.enabled": true,        // Enforce a max number of open editors
    "workbench.editor.limit.value": 2,             // No more than two editors open at once
    "workbench.editor.limit.perEditorGroup": true, // Limits are enforced, per split
    "workbench.editor.closeOnFileDelete": true,    // Deleting files should close them
    "workbench.editor.untitled.hint": "hidden",    // Remove text from startupEditor
    "workbench.startupEditor": "newUntitledFile",  // Open the editor with an empty file
    "workbench.iconTheme": null,                   // Reduce visual noise
    "workbench.tips.enabled": false,               // No more tips please
    "workbench.layoutControl.enabled": false,      // Remove layout buttons from top right
    "workbench.activityBar.visible": false,        // Remove left hand side activity bar
    "workbench.settings.editor": "json",           // Default to opening settings as JSON

    // Other
    "window.autoDetectColorScheme": true, // Use the OS provided light/dark mode
    "window.dialogStyle": "custom",       // Don't use native dialogs
    "window.title": " ",                  // Empty string will be overridden
    "breadcrumbs.enabled": false,         // Don't show breadcrumbs below tab bar
    "files.insertFinalNewline": true,     // Insert a final newline when saving
    "diffEditor.renderSideBySide": false, // Render diffs in a single split

    // Git
    "git.confirmSync": false,                    // Don't prompt before syncing a repo
    "git.suggestSmartCommit": false,             // Don't automatically stage changes
    "git.autoRepositoryDetection": "subFolders", // Submodule detection
    "git.ignoredRepositories": ["/Users/dan/kumu/kumu-ops/docker/web/src"],

    // Terminal
    "terminal.integrated.fontSize": 13,
    "terminal.integrated.enableMultiLinePasteWarning": false,

    // Screencasting / Recording
    "screencastMode.fontSize": 30,
    "screencastMode.verticalOffset": 0,
    "screencastMode.keyboardShortcutsFormat": "commandWithGroupAndKeys",

    // Security
    "security.workspace.trust.banner": "never",
    "security.workspace.trust.untrustedFiles": "open",
    "telemetry.telemetryLevel": "off",

    // Formatting
    "editor.defaultFormatter": "esbenp.prettier-vscode",
    "prettier.useTabs": false,
    "prettier.arrowParens": "avoid",
    "prettier.trailingComma": "all",

    // Vim
    "vim.showmodename": false,
    "vim.leader": "<space>",
    "vim.normalModeKeyBindings": [
        // Make vim motions visually consistent when word wrapping is enabled.
        {
            "before": ["j"],
            "after": ["g", "j"]
        },
        {
            "before": ["k"],
            "after": ["g", "k"]
        },
        {
            "before": ["$"],
            "after": ["g", "_"]
        },
        {
            "before": ["0"],
            "after": ["g", "0"]
        },

        // Vsnetrw overrides (https://github.com/danprince/vsnetrw#vscodevim-keybindings)
        {
            "before": ["-"],
            "commands": ["vsnetrw.open"],
            "when": "editorLangId != 'vsnetrw'"
        },
        {
            "before": ["~"],
            "commands": ["vsnetrw.openHome"],
            "when": "editorLangId != 'vsnetrw'"
        },
        // Jump through quickfix results
        {
            "before": ["]", "q"],
            "commands": ["editor.action.marker.nextInFiles"]
        },
        {
            "before": ["[", "q"],
            "commands": ["editor.action.marker.prevInFiles"]
        },
        // Jump through search results
        {
            "before": ["[", "s"],
            "commands": ["search.action.focusNextSearchResult"]
        },
        {
            "before": ["]", "s"],
            "commands": ["search.action.focusPreviousSearchResult"]
        },
        // Jump through Git hunks
        {
            "before": ["]", "g"],
            "when": "editorTextFocus && !textCompareEditorActive",
            "commands": ["workbench.action.editor.nextChange"]
        },
        {
            "before": ["[", "g"],
            "when": "editorTextFocus && !textCompareEditorActive",
            "commands": ["workbench.action.editor.previousChange"]
        },

        // Leader mappings
        {
            "before": ["<leader>", "t"],
            "commands": ["workbench.action.tasks.test"]
        },
        {
            "before": ["<leader>", "b"],
            "commands": ["workbench.action.tasks.build"]
        },
        {
            "before": ["<leader>", "g", "g"],
            "commands": ["magit.status"]
        },
        {
            "before": ["<leader>", "g", "r"],
            "commands": ["editor.action.goToReferences"]
        },
        {
            "before": ["<leader>", "r", "n"],
            "commands": ["editor.action.rename"]
        },
        {
            "before": ["<leader>", "q", "f"],
            "commands": ["editor.action.quickFix"]
        },
        {
            "before": ["<leader>", "f", "f"],
            "commands": ["editor.action.autoFix"]
        },
    ],

    // Language overrides
    "[typescriptreact]": {
        "editor.defaultFormatter": "esbenp.prettier-vscode"
    },
    "[typescript]": {
        "editor.defaultFormatter": "esbenp.prettier-vscode"
    },
    "[jsonc]": {
        "editor.defaultFormatter": "esbenp.prettier-vscode"
    },
    "[sh]": {
        "editor.tabSize": 2
    },
    "[markdown]": {
        "editor.wordWrapColumn": 80,
        "editor.wordWrap": "wordWrapColumn"
    },
    "[go]": {
        "editor.defaultFormatter": "golang.go"
    },
    "[zig]": {
        "editor.defaultFormatter": "tiehuis.zig",
        "editor.tabSize": 4,
        "editor.formatOnSave": true
    },
    "[html]": {
        "editor.defaultFormatter": "vscode.html-language-features"
    },

    // Extensions
    "typescript.updateImportsOnFileMove.enabled": "always",
    "javascript.updateImportsOnFileMove.enabled": "always",
    "go.toolsManagement.autoUpdate": true,
    "zig.buildOnSave": true,
    "zls.path": "/usr/local/bin/zls",
    "zls.enable_ast_check_diagnostics": true,
    "zls.enable_import_embedfile_argument_completions": true,
    "zls.include_at_in_builtins": true,
    "zls.warn_style": true,
    "zls.check_for_update": false,
    "write-good.only-lint-on-save": null,
    "emmet.showExpandedAbbreviation": "never",
    "Lua.telemetry.enable": false,
    "calva.showCalvaSaysOnStart": false,
    "calva.prettyPrintingOptions": {
        "enabled": true,
        "width": 120,
        "maxLength": 50,
        "printEngine": "pprint"
    },
    "editor.unicodeHighlight.ambiguousCharacters": false,
}
