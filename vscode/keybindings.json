[
  // Disable escape behaviour in vsnetrw explorer (https://github.com/danprince/vsnetrw)
  {
    "key": "escape",
    "command": "-vsnetrw.close",
    "when": "editorTextFocus && editorLangId == vsnetrw && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"
  },

  // Vim + Magit (https://github.com/kahole/edamagit#vim-support-vscodevim)
  {
    "key": "-",
    "command": "vsnetrw.openHome",
    "when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"
  },
  {
    "key": "g g",
    "command": "cursorTop",
    "when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/" 
  },
  {
    "key": "g r",
    "command": "magit.refresh",
    "when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/" 
  },
  {
    "key": "tab",
    "command": "extension.vim_tab",
    "when": "editorFocus && vim.active && !inDebugRepl && vim.mode != 'Insert' && editorLangId != 'magit'"
  },
  {
    "key": "tab",
    "command": "-extension.vim_tab",
    "when": "editorFocus && vim.active && !inDebugRepl && vim.mode != 'Insert'"
  },
  {
    "key": "x",
    "command": "magit.discard-at-point",
    "when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"
  },
  {
    "key": "k",
    "command": "-magit.discard-at-point"
  },
  {
    "key": "shift+k",
    "command": "magit.discard-at-point",
    "when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"
  },
  {
    "key": "shift+l",
    "command": "magit.logging",
    "when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"
  },

  // Conflicts with vsnetrw
  // {
  //   "key": "-",
  //   "command": "magit.reverse-at-point",
  //   "when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"
  // },
  {
    "key": "v",
    "command": "-magit.reverse-at-point"
  },
  // Conflicts with vsnetrw
  //{
  //  "key": "shift+-",
  //  "command": "magit.reverting",
  //  "when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"
  //},
  {
    "key": "shift+v",
    "command": "-magit.reverting"
  },
  {
    "key": "shift+o",
    "command": "magit.resetting",
    "when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"
  },
  {
    "key": "shift+x",
    "command": "-magit.resetting"
  },
  {
    "key": "x",
    "command": "-magit.reset-mixed"
  },
  // Conflicts with ctrw+w l to move windows
  {
    "key": "l",
    "command": "-magit.logging"
  },
  {
    "key": "ctrl+u x",
    "command": "-magit.reset-hard"
  },

  // Calva
  {
    "key": "ctrl+w",
    "command": "-paredit.sexpRangeExpansion"
  },
  {
    "key": "ctrl+shift+w",
    "command": "-paredit.sexpRangeContraction"
  },
  {
    "key": "escape",
    "command": "-calva.clearInlineResults"
  },
  {
    "key": "escape",
    "command": "macros.clearResultsAndEscape",
    "when": "editorTextFocus && !editorHasMultipleSelections && !editorReadOnly && !hasOtherSuggestions && !suggestWidgetVisible && editorLangId == 'clojure'"
  },
  {
    "key": "cmd+enter",
    "command": "calva.loadFile",
    "when": "calva:connected && calva:keybindingsEnabled && editorLangId == 'clojure'"
  },
  {
    "key": "ctrl+i",
    "command": "-calva-fmt.tabIndent",
    "when": "calva:keybindingsEnabled && editorTextFocus && !editorReadOnly && !hasOtherSuggestions && !suggestWidgetVisible && editorLangId == 'clojure'"
  },
  {
    "key": "shift+alt+4",
    "command": "paredit.closeList",
    "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
  },
  {
    "key": "ctrl+end",
    "command": "-paredit.closeList",
    "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
  },
  {
    "key": "shift+alt+0",
    "command": "paredit.openList",
    "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
  },
  {
    "key": "ctrl+home",
    "command": "-paredit.openList",
    "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
  },
  {
    "key": "ctrl+alt+k",
    "command": "paredit.backwardDownSexp",
    "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
  },
  {
    "key": "ctrl+alt+up",
    "command": "-paredit.backwardDownSexp",
    "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
  },
  {
    "key": "ctrl+h",
    "command": "paredit.backwardSexp",
    "when": "calva:cursorBeforeComment && editorLangId == 'clojure' || calva:keybindingsEnabled && editorTextFocus && !calva:cursorInComment && !config.calva.paredit.hijackVSCodeDefaults && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
  },
  {
    "key": "ctrl+left",
    "command": "-paredit.backwardSexp",
    "when": "calva:cursorBeforeComment && editorLangId == 'clojure' || calva:keybindingsEnabled && editorTextFocus && !calva:cursorInComment && !config.calva.paredit.hijackVSCodeDefaults && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
  },
  {
    "key": "ctrl+k",
    "command": "paredit.backwardUpSexp",
    "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
  },
  {
    "key": "ctrl+up",
    "command": "-paredit.backwardUpSexp",
    "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
  },
  {
    "key": "ctrl+shift+alt+l",
    "command": "paredit.barfSexpBackward",
    "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
  },
  {
    "key": "ctrl+shift+alt+right",
    "command": "-paredit.barfSexpBackward",
    "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
  },
  {
    "key": "ctrl+alt+h",
    "command": "paredit.barfSexpForward",
    "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
  },
  {
    "key": "ctrl+alt+left",
    "command": "-paredit.barfSexpForward",
    "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
  },
  {
    "key": "alt+k",
    "command": "paredit.dragSexprBackward",
    "when": "calva:keybindingsEnabled && config.calva.paredit.hijackVSCodeDefaults && editorTextFocus && !calva:cursorInComment && editorLangId == 'clojure' && paredit:keyMap =~ /strict/"
  },
  {
    "key": "alt+up",
    "command": "-paredit.dragSexprBackward",
    "when": "calva:keybindingsEnabled && config.calva.paredit.hijackVSCodeDefaults && editorTextFocus && !calva:cursorInComment && editorLangId == 'clojure' && paredit:keyMap =~ /strict/"
  },
  {
    "key": "alt+j",
    "command": "paredit.dragSexprForward",
    "when": "calva:keybindingsEnabled && config.calva.paredit.hijackVSCodeDefaults && editorTextFocus && !calva:cursorInComment && editorLangId == 'clojure' && paredit:keyMap =~ /strict/"
  },
  {
    "key": "alt+down",
    "command": "-paredit.dragSexprForward",
    "when": "calva:keybindingsEnabled && config.calva.paredit.hijackVSCodeDefaults && editorTextFocus && !calva:cursorInComment && editorLangId == 'clojure' && paredit:keyMap =~ /strict/"
  },
  {
    "key": "ctrl+j",
    "command": "paredit.forwardDownSexp",
    "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
  },
  {
    "key": "ctrl+down",
    "command": "-paredit.forwardDownSexp",
    "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
  },
  {
    "key": "alt+l",
    "command": "paredit.forwardSexp",
    "when": "calva:cursorAfterComment && editorLangId == 'clojure' || calva:keybindingsEnabled && config.calva.paredit.hijackVSCodeDefaults && editorTextFocus && !calva:cursorInComment && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
  },
  {
    "key": "alt+right",
    "command": "-paredit.forwardSexp",
    "when": "calva:cursorAfterComment && editorLangId == 'clojure' || calva:keybindingsEnabled && config.calva.paredit.hijackVSCodeDefaults && editorTextFocus && !calva:cursorInComment && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
  },
  {
    "key": "ctrl+l",
    "command": "paredit.forwardSexp",
    "when": "calva:cursorAfterComment && editorLangId == 'clojure' || calva:keybindingsEnabled && editorTextFocus && !calva:cursorInComment && !config.calva.paredit.hijackVSCodeDefaults && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
  },
  {
    "key": "ctrl+right",
    "command": "-paredit.forwardSexp",
    "when": "calva:cursorAfterComment && editorLangId == 'clojure' || calva:keybindingsEnabled && editorTextFocus && !calva:cursorInComment && !config.calva.paredit.hijackVSCodeDefaults && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
  },
  {
    "key": "shift+alt+k",
    "command": "paredit.selectBackwardUpSexp",
    "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
  },
  {
    "key": "ctrl+shift+up",
    "command": "-paredit.selectBackwardUpSexp",
    "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
  },
  {
    "key": "ctrl+alt+j",
    "command": "paredit.selectForwardDownSexp",
    "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
  },
  {
    "key": "ctrl+shift+down",
    "command": "-paredit.selectForwardDownSexp",
    "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
  },
  {
    "key": "ctrl+alt+l",
    "command": "paredit.selectForwardSexp",
    "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
  },
  {
    "key": "shift+alt+right",
    "command": "-paredit.selectForwardSexp",
    "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
  },
  {
    "key": "ctrl+shift+alt+j",
    "command": "paredit.selectForwardUpSexp",
    "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
  },
  {
    "key": "ctrl+shift+alt+down",
    "command": "-paredit.selectForwardUpSexp",
    "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
  },
  {
    "key": "ctrl+shift+alt+h",
    "command": "paredit.slurpSexpBackward",
    "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
  },
  {
    "key": "ctrl+shift+alt+left",
    "command": "-paredit.slurpSexpBackward",
    "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
  },
  {
    "key": "ctrl+alt+l",
    "command": "paredit.slurpSexpForward",
    "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
  },
  {
    "key": "ctrl+alt+right",
    "command": "-paredit.slurpSexpForward",
    "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
  },
  {
    "key": "shift+alt+h",
    "command": "-references-view.showCallHierarchy",
    "when": "editorHasCallHierarchyProvider"
  },
  {
    "key": "shift+alt+h",
    "command": "-editor.showCallHierarchy",
    "when": "editorHasCallHierarchyProvider && editorTextFocus && !inReferenceSearchEditor"
  },
  {
    "key": "shift+alt+h",
    "command": "-editor.showSupertypes",
    "when": "typeHierarchyVisible && typeHierarchyDirection == 'subtypes'"
  },
  {
    "key": "ctrl+l",
    "command": "-extension.vim_navigateCtrlL",
    "when": "editorTextFocus && vim.active && vim.use<C-l> && !inDebugRepl"
  },
  {
    "key": "ctrl+h",
    "command": "-deleteLeft",
    "when": "textInputFocus"
  },
  {
    "key": "ctrl+h",
    "command": "-extension.vim_ctrl+h",
    "when": "editorTextFocus && vim.active && vim.use<C-h> && !inDebugRepl"
  },
  {
    "key": "cmd+enter",
    "command": "nim.run.file",
    "when": "editorLangId == 'nim'"
  },
  {
    "key": "f6",
    "command": "-nim.run.file",
    "when": "editorLangId == 'nim'"
  },
  {
      "key": "ctrl+s",
      "commands": ["git.stageSelectedRanges"],
      "when": "isInDiffEditor"
  },
  {
      "before": "ctrl+shift+s",
      "commands": ["git.stage"],
      "when": "isInDiffEditor"
  },
  {
      "before": ["ctrl+u"],
      "commands": ["git.unstageSelectedRanges"],
      "when": "isInDiffEditor"
  },
  {
      "before": ["U"],
      "commands": ["git.unstage"],
      "when": "isInDiffEditor"
  },
  {
    "key": "backspace",
    "command": "-paredit.deleteBackward",
    "when": "calva:keybindingsEnabled && editorTextFocus && !calva:cursorInComment && !editorHasMultipleSelections && !editorReadOnly && editorLangId == 'clojure' && paredit:keyMap == 'strict'"
  },
]
